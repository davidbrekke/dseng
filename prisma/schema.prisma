datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  ext_expires_in     Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(student)
  program       Program?   @relation(fields: [programId], references: [id])
  programId     String?
  Plan          Plan[]
}

enum Role {
  student
  advisor
}

model Course {
  id          String  @id @default(cuid())
  title       String
  code        String  @unique
  credits     Int
  clockHours  Int
  required    Boolean
  description String?
  Plan        Plan?   @relation(fields: [planId], references: [id])
  planId      String?
}

model Program {
  id      String @id @default(cuid())
  name    String
  code    String @unique
  credits Int
  users   User[]
  Plan    Plan[]
}

model Plan {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  program   Program  @relation(fields: [programId], references: [id])
  programId String
  courses   Course[]
}
